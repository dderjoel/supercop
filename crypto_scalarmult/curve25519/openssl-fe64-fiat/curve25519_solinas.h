#ifndef __CURVE25519_SOLINAS_H
#define __CURVE25519_SOLINAS_H

#include "namemapping.h"

/* Autogenerated:
 * '/home/joel/dev/4github/CryptOpt/dist/data/fiat-bridge/solinas_reduction'
 * --lang C --inline-internal --internal-static --use-value-barrier
 * curve25519_solinas 64 '2^255 - 19' mul */
/* curve description: curve25519_solinas */
/* machine_wordsize = 64 (from "64") */
/* requested operations: mul */
/* s-c = 2^255 - [(1, 19)] (from "2^255 - 19") */
/*  */
/* Computed values: */
/*  */

#include <stdint.h>
typedef unsigned char fiat_curve25519_solinas_uint1;
typedef signed char fiat_curve25519_solinas_int1;
#if defined(__GNUC__) || defined(__clang__)
#define FIAT_CURVE25519_SOLINAS_FIAT_EXTENSION __extension__
#define FIAT_CURVE25519_SOLINAS_FIAT_INLINE __inline__
#else
#define FIAT_CURVE25519_SOLINAS_FIAT_EXTENSION
#define FIAT_CURVE25519_SOLINAS_FIAT_INLINE
#endif

FIAT_CURVE25519_SOLINAS_FIAT_EXTENSION typedef signed __int128
    fiat_curve25519_solinas_int128;
FIAT_CURVE25519_SOLINAS_FIAT_EXTENSION typedef unsigned __int128
    fiat_curve25519_solinas_uint128;

#if (-1 & 3) != 3
#error "This code only works on a two's complement system"
#endif

#if !defined(FIAT_CURVE25519_SOLINAS_NO_ASM) &&                                \
    (defined(__GNUC__) || defined(__clang__))
static __inline__ uint64_t
fiat_curve25519_solinas_value_barrier_u64(uint64_t a) {
  __asm__("" : "+r"(a) : /* no inputs */);
  return a;
}
#else
#define fiat_curve25519_solinas_value_barrier_u64(x) (x)
#endif

/*
 * The function fiat_curve25519_solinas_addcarryx_u64 is an addition with carry.
 *
 * Postconditions:
 *   out1 = (arg1 + arg2 + arg3) mod 2^64
 *   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
static FIAT_CURVE25519_SOLINAS_FIAT_INLINE void
fiat_curve25519_solinas_addcarryx_u64(uint64_t *out1,
                                      fiat_curve25519_solinas_uint1 *out2,
                                      fiat_curve25519_solinas_uint1 arg1,
                                      uint64_t arg2, uint64_t arg3) {
  fiat_curve25519_solinas_uint128 x1;
  uint64_t x2;
  fiat_curve25519_solinas_uint1 x3;
  x1 = ((arg1 + (fiat_curve25519_solinas_uint128)arg2) + arg3);
  x2 = (uint64_t)(x1 & UINT64_C(0xffffffffffffffff));
  x3 = (fiat_curve25519_solinas_uint1)(x1 >> 64);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_curve25519_solinas_subborrowx_u64 is a subtraction with
 * borrow.
 *
 * Postconditions:
 *   out1 = (-arg1 + arg2 + -arg3) mod 2^64
 *   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0x1]
 */
static FIAT_CURVE25519_SOLINAS_FIAT_INLINE void
fiat_curve25519_solinas_subborrowx_u64(uint64_t *out1,
                                       fiat_curve25519_solinas_uint1 *out2,
                                       fiat_curve25519_solinas_uint1 arg1,
                                       uint64_t arg2, uint64_t arg3) {
  fiat_curve25519_solinas_int128 x1;
  fiat_curve25519_solinas_int1 x2;
  uint64_t x3;
  x1 = ((arg2 - (fiat_curve25519_solinas_int128)arg1) - arg3);
  x2 = (fiat_curve25519_solinas_int1)(x1 >> 64);
  x3 = (uint64_t)(x1 & UINT64_C(0xffffffffffffffff));
  *out1 = x3;
  *out2 = (fiat_curve25519_solinas_uint1)(0x0 - x2);
}

/*
 * The function fiat_curve25519_solinas_mulx_u64 is a multiplication, returning
 * the full double-width result.
 *
 * Postconditions:
 *   out1 = (arg1 * arg2) mod 2^64
 *   out2 = ⌊arg1 * arg2 / 2^64⌋
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0xffffffffffffffff]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 *   out2: [0x0 ~> 0xffffffffffffffff]
 */
static FIAT_CURVE25519_SOLINAS_FIAT_INLINE void
fiat_curve25519_solinas_mulx_u64(uint64_t *out1, uint64_t *out2, uint64_t arg1,
                                 uint64_t arg2) {
  fiat_curve25519_solinas_uint128 x1;
  uint64_t x2;
  uint64_t x3;
  x1 = ((fiat_curve25519_solinas_uint128)arg1 * arg2);
  x2 = (uint64_t)(x1 & UINT64_C(0xffffffffffffffff));
  x3 = (uint64_t)(x1 >> 64);
  *out1 = x2;
  *out2 = x3;
}

/*
 * The function fiat_curve25519_solinas_cmovznz_u64 is a single-word conditional
 * move.
 *
 * Postconditions:
 *   out1 = (if arg1 = 0 then arg2 else arg3)
 *
 * Input Bounds:
 *   arg1: [0x0 ~> 0x1]
 *   arg2: [0x0 ~> 0xffffffffffffffff]
 *   arg3: [0x0 ~> 0xffffffffffffffff]
 * Output Bounds:
 *   out1: [0x0 ~> 0xffffffffffffffff]
 */
static FIAT_CURVE25519_SOLINAS_FIAT_INLINE void
fiat_curve25519_solinas_cmovznz_u64(uint64_t *out1,
                                    fiat_curve25519_solinas_uint1 arg1,
                                    uint64_t arg2, uint64_t arg3) {
  fiat_curve25519_solinas_uint1 x1;
  uint64_t x2;
  uint64_t x3;
  x1 = (!(!arg1));
  x2 =
      ((fiat_curve25519_solinas_int1)(0x0 - x1) & UINT64_C(0xffffffffffffffff));
  x3 = ((fiat_curve25519_solinas_value_barrier_u64(x2) & arg3) |
        (fiat_curve25519_solinas_value_barrier_u64((~x2)) & arg2));
  *out1 = x3;
}

void fiat_curve25519_solinas_mul(uint64_t out1[4], const uint64_t arg1[4],
                                 const uint64_t arg2[4]);
void fiat_curve25519_solinas_square(uint64_t out1[4], const uint64_t arg1[4]);
#endif
